general:
  seed: 1

# Experiment hyper-parameters may take a range of values in which case they will be
# optimised with Optuna
experiment:
  # Which variables are to be interpreted as Optuna float delimiters
  float_keys: [step_size, update_per_step]
  log_domain_keys: [step_size, update_per_step]
  # [0, 7, 8, 11]
  bert_layer_index: 0
  n_trials: 60
  n_epochs: 500
  # Number of update steps in epoch
  epoch_steps: 1000
  warmup_steps: 2000

  # How many steps in the environment will be called before the agent enters the update phase.
  # Works in synergy with update_per_step. For step_per_collect=200 and update_per_step=02.5
  # The agent will enter update stage every 200 environment steps and get updated 50 times. 
  step_per_collect: 200
  # How many updates will happen to the network per step in the environment
  # For 0.25 update happens every 4 steps
  update_per_step: [0.2, 0.5]
  
  # Algorithm hyper-parameters
  phi_trunk_dim: [[2048, 1024, 768], [1024, 768]]
  phi_head_dim: [[768]]
  psi_nn_dim: [[768, 1024, 768], [768, 768]]
  use_reconstruction_loss: false
  step_size: [1e-5, 1e-4]
  batch_size: [128, 256]
  l2_freq_scaling: false
  target_update_steps: [200, 500, 1000]
  cycle_update_steps: [20, 200, 400]
  episode_per_test: 1

  buffer_size: 1000000
  prioritised_replay: false
  # How strongly priorities affect sampling
  priority_alpha: 0.7
  # How strongly to correct for priority-affected sampling
  # Importance weights schedule
  priority_beta_start: 0.4
  priority_beta_end: 1.0
  priority_beta_frac: 0.8

  # Exploration rate parameters
  epsilon_start: 1
  epsilon_end: 0.05
  epsilon_fraction: 0.8
  test_epsilon: 0.05
  linear_schedule: [true, false]

# Environment hyper-parameters are fixed
environment:
  # 'W' - wall
  # ' ' - empty
  # 'T' - potential goal position in the test set (placement not allowed in training)
  grid:
    - ['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W']
    - ['W', ' ', ' ', 'T', 'W', 'T', ' ', ' ', ' ', 'W']
    - ['W', ' ', ' ', ' ', 'W', ' ', ' ', ' ', ' ', 'W']
    - ['W', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'W']
    - ['W', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'W']
    - ['W', ' ', 'W', ' ', 'T', ' ', 'W', ' ', 'T', 'W']
    - ['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W']
  # If true, origin and destination locations will be masked and the agent will have to rely on text to extact them
  goal_channel: false
  obs_type: vec
  num_objects: 2
  disc_fact: 0.99 #gamma
  resample_episodes: 1000000000
  max_steps: 30
  slip_chance: 0
  seed: 1

  # use_fetures must reflect order of keys in features. It can be a subset, but order must be followed!
  use_features: [colour]
  features:
    # circle, triangle, square, diamond, star, key
    shape: [ball, triangle, square, diamond, star, key]
    # green, blue, red, yellow
    colour: [red, blue, green, yellow]

  task_names: [go_to, go_to_easy, pick_up, retrieve]
  task_id: go_to

  go_to:
    - Go to colour shape.

  go_to_easy:
    - Go to colour shape.

  pick_up:
    - Pick up goal_formulation.

  retrieve:
    - Retrieve goal_formulation.

  default_feature: "0"