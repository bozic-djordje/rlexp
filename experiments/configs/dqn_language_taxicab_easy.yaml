general:
  seed: 1

# Experiment hyper-parameters may take a range of values in which case they will be
# optimised with Optuna
experiment:
  # Which variables are to be interpreted as Optuna float delimiters
  float_keys: [step_size, update_per_step]
  log_domain_keys: [step_size, update_per_step]
  # [0, 7, 8, 11]
  bert_layer_index: 0
  n_trials: 20
  
  n_epochs: 1500
  # Number of update steps in epoch
  epoch_steps: 1000
  warmup_steps: 500

  # How many steps in the environment will be called before the agent enters the update phase.
  # Works in synergy with update_per_step. For step_per_collect=200 and update_per_step=02.5
  # The agent will enter update stage every 200 environment steps and get updated 50 times. 
  step_per_collect: 200
  # How many updates will happen to the network per step in the environment
  # For 0.25 update happens every 4 steps
  update_per_step: [0.15, 0.5]
  
  # Algorithm hyper-parameters
  hidden_dim: [[1024, 256]]
  step_size: [1e-5, 1e-3]
  batch_size: 256
  buffer_size: 500000
  prioritised_replay: True
  target_update_steps: 500
  episode_per_test: 1

  # Exploration rate parameters
  epsilon_start: 1
  epsilon_end: 0.05
  epsilon_fraction: 0.8
  test_epsilon: 0.05

# Environment hyper-parameters are fixed
environment:
  grid:
    - ['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W']
    - ['W', 'C', ' ', ' ', 'W', ' ', ' ', ' ', 'C', 'W']
    - ['W', ' ', ' ', ' ', 'W', ' ', ' ', ' ', ' ', 'W']
    - ['W', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'W']
    - ['W', ' ', 'W', ' ', ' ', ' ', 'W', ' ', ' ', 'W']
    - ['W', 'C', 'W', ' ', ' ', ' ', 'W', 'C', ' ', 'W']
    - ['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W']
  # If true, origin and destination locations will be masked and the agent will have to rely on text to extact them
  pomdp: true
  easy_mode: true
  max_steps: 200
  disc_fact: 0.99 #gamma
  start_pos: null
  slip_chance: 0
  seed: 1
  train_test_split: 0.7

  # Attributes that should be grounded.
  # Attributes that have a direct representation
  attribute_order: ["colour", "building"]
  colour: [green, blue, red, yellow]
  building: [hospital, school, library, office]
    
  location_formulation:
    - colour building
    #  - building which is colour

  passenger_formulation:
    - passenger
    # - client
    # - traveler
    # - comuter

  drive_formulation:
    - go
    # - head
    # - drive
    # - ride

  goal_formulation:
    - phrase: drive_common to location_formulation.
      goal_first: true
    # - phrase: passenger_reference wants to drive_common to location_formulation. they are currently at location_formulation.
    #   goal_first: true
    # - phrase: passenger_reference is waiting at location_formulation. drive_common them to location_formulation.
    #   goal_first: false
    # - phrase: a ride was requested to location_formulation. the pickup location is at location_formulation.
    #   goal_first: true

  default_feature: "0" 

  # 8 combinations total with green hospital being fixed
  # green hospitals must not exist in the train or test sets
  hard_test_attributes:
    colour: null
    building: null