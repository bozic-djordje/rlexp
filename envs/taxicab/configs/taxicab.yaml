grid:
  - ['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W']
  - ['W', 'C', ' ', ' ', 'W', ' ', ' ', ' ', 'C', 'W']
  - ['W', ' ', ' ', ' ', 'W', ' ', ' ', ' ', ' ', 'W']
  - ['W', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'W']
  - ['W', ' ', 'W', ' ', ' ', ' ', 'W', ' ', ' ', 'W']
  - ['W', 'C', 'W', ' ', ' ', ' ', 'W', 'C', ' ', 'W']
  - ['W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W']
# If true, origin and destination locations will be masked and the agent will have to rely on text to extact them
pomdp: false 
easy_mode: true
# If easy_mode is true, goto_mode is true
goto_mode: true
start_pos: null
max_steps: 200
slip_chance: 0
seed: 1
train_test_split: 0.7

# Attributes that should be grounded.
# Attributes that have a direct representation
attribute_order: ["colour", "building"]
colour: [green, blue, red, yellow]
building: [hospital, school, library, office]

location_formulation:
  
location_formulation:
  - colour building
  - building which is colour

passenger_formulation:
  - passenger
  - client
  # - traveler
  # - comuter

drive_formulation:
  - go
  - head
  # - drive
  # - ride

goal_formulation:
  - phrase: drive_common to passenger_reference at location_formulation, then drive_common to location_formulation.
    goal_first: false
  - phrase: passenger_reference wants to drive_common to location_formulation. they are currently at location_formulation.
    goal_first: true
  # - phrase: passenger_reference is waiting at location_formulation. drive_common them to location_formulation.
  #   goal_first: false
  # - phrase: a ride was requested to location_formulation. the pickup location is at location_formulation.
  #   goal_first: true

default_feature: "0" 

# 8 combinations total with green hospital being fixed
# green hospitals must not exist in the train or test sets
hard_test_attributes:
  colour: null
  building: null